name: Deploy HR Candidate Tool to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: 'ktsapp'    # Replace with your app name from Step 1.1
  REGISTRY_NAME: 'ktsacr'            # Replace with your ACR name from Step 1.1
  IMAGE_NAME: 'hr-candidate-app'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Ensure storage containers exist
      continue-on-error: true
      run: |
        if [ -n "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" ]; then
          echo "Ensuring storage containers exist..."
          # Install Azure CLI
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          
          # Create containers if they don't exist
          az storage container create \
            --name appdata \
            --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            --output none || echo "Container might already exist"
          
          az storage container create \
            --name hr-backups \
            --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            --output none || echo "Backup container might already exist"
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
        platforms: linux/amd64
        # cache-from: type=gha
        # cache-to: type=gha,mode=max

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure Web App Container Settings
      run: |
        echo "üîß Configuring Web App container settings..."
        
        # Configure container settings
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --docker-custom-image-name "${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}" \
          --docker-registry-server-url "https://${{ env.REGISTRY_NAME }}.azurecr.io" \
          --docker-registry-server-user "${{ secrets.ACR_USERNAME }}" \
          --docker-registry-server-password "${{ secrets.ACR_PASSWORD }}"
        
        # Enable container logging
        az webapp log config \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --docker-container-logging filesystem
        
        # Set container-specific settings
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --settings \
          WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
          WEBSITES_PORT=8501 \
          DOCKER_REGISTRY_SERVER_URL="https://${{ env.REGISTRY_NAME }}.azurecr.io" \
          DOCKER_REGISTRY_SERVER_USERNAME="${{ secrets.ACR_USERNAME }}" \
          DOCKER_REGISTRY_SERVER_PASSWORD="${{ secrets.ACR_PASSWORD }}"

    - name: Configure Application Settings
      run: |
        echo "‚öôÔ∏è Configuring application settings..."
        az webapp config appsettings set \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --settings \
          AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
          AZURE_OPENAI_ENDPOINT="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
          AZURE_OPENAI_API_KEY="${{ secrets.AZURE_OPENAI_API_KEY }}" \
          AZURE_OPENAI_API_VERSION="${{ secrets.AZURE_OPENAI_API_VERSION }}" \
          AZURE_OPENAI_DEPLOYMENT_NAME="${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}" \
          BACKUP_CONTAINER="hr-backups" \
          DB_CONTAINER="appdata" \
          DB_BLOB_NAME="hr_candidates.db" \
          LOCAL_DB_PATH="/tmp/hr_candidates.db" \
          AUTO_SYNC_ENABLED="True" \
          SYNC_INTERVAL_SECONDS="300" \
          AUTO_BACKUP_ENABLED="True" \
          BACKUP_RETENTION_DAYS="30" \
          MAX_FILE_SIZE_MB="10" \
          MAX_SEARCH_RESULTS="100" \
          LOG_LEVEL="INFO"

    - name: Restart Web App
      run: |
        echo "üîÑ Restarting web app..."
        az webapp restart \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }}

    - name: Verify deployment
      run: |
        echo "‚úÖ Waiting for application to start..."
        sleep 45
        
        # Check app status
        APP_STATE=$(az webapp show \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --query "state" \
          --output tsv)
        
        echo "App State: $APP_STATE"
        
        # Try to access the health endpoint
        APP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "Testing application at: $APP_URL"
        
        # Wait a bit more and test
        sleep 30
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" || echo "000")
        echo "HTTP Status: $HTTP_STATUS"
        
        if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "302" ]; then
          echo "‚úÖ Application is responding successfully!"
        else
          echo "‚ö†Ô∏è  Application might still be starting up. HTTP Status: $HTTP_STATUS"
          echo "Check logs with: az webapp log tail --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}"
        fi
        
        echo ""
        echo "üéâ Deployment completed!"
        echo "üåê Application URL: $APP_URL"
        echo ""
        echo "üìã To check logs if needed:"
        echo "az webapp log tail --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}"

  verify-deployment:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Extended Verification
      run: |
        echo "üîç Running extended verification..."
        
        # Check container status
        echo "Container Status:"
        az webapp show \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --query "{state: state, hostNames: hostNames, containerSettings: siteConfig.linuxFxVersion}" \
          --output table
        
        # Check recent logs
        echo ""
        echo "üìã Recent logs:"
        timeout 30s az webapp log tail \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} || echo "Log retrieval completed"
        
        echo ""
        echo "‚úÖ Extended verification completed"
        echo "üîó Direct link: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"